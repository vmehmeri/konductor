{# agent_py.j2 #}
# This file is auto-generated by the ADK code generator.
# Do not edit this file directly.

from google.adk.agents import LlmAgent, SequentialAgent, LoopAgent, ParallelAgent
from google.adk.models import Gemini
from google.genai.types import GenerateContentConfig, HttpRetryOptions
from . import tools

# --- Model Configurations ---
MODEL_CONFIG_MAP = {
{% for model in models %}
    "{{ model.metadata.name }}": Gemini(
        model="{{ model.spec.modelId }}",
        {% if model.spec.parameters %}
        generate_content_config=GenerateContentConfig(
            {% for key, value in model.spec.parameters.items() %}
            {{ key }}={{ value | tojson }},
            {% endfor %}
        ),
        {% endif %}
        {% if model.spec.retryOptions %}
        retry_options=HttpRetryOptions(
            {% if model.spec.retryOptions.attempts %}attempts={{ model.spec.retryOptions.attempts }},{% endif %}
            {% if model.spec.retryOptions.initialDelay %}initial_delay={{ model.spec.retryOptions.initialDelay }},{% endif %}
            {% if model.spec.retryOptions.maxDelay %}max_delay={{ model.spec.retryOptions.maxDelay }},{% endif %}
            {% if model.spec.retryOptions.expBase %}exp_base={{ model.spec.retryOptions.expBase }},{% endif %}
            {% if model.spec.retryOptions.jitter %}jitter={{ model.spec.retryOptions.jitter }},{% endif %}
            {% if model.spec.retryOptions.httpStatusCodes %}http_status_codes={{ model.spec.retryOptions.httpStatusCodes | tojson }},{% endif %}
        ),
        {% endif %}
    ),
{% endfor %}
}

# --- Tool Mappings ---
TOOL_FUNCTION_MAP = {
{% for tool in tools %}
    "{{ tool.metadata.name }}": tools.{{ tool.spec.source.functionName }},
{% endfor %}
}

# --- Agent Definitions ---
{% for agent in llm_agents %}
# Definition for LlmAgent: {{ agent.metadata.name }}
{{ agent.metadata.name | replace('-', '_') }} = LlmAgent(
    name="{{ agent.metadata.name }}",
    instruction="""{{ agent.spec.instruction }}""",
    tools=[
        TOOL_FUNCTION_MAP[tool_ref]
        for tool_ref in {{ agent.spec.toolRefs }}
    ],
    {% if agent.spec.output_key %}output_key="{{ agent.spec.output_key }}",{% endif %}
    model=MODEL_CONFIG_MAP["{{ agent.spec.modelRef }}"]
)
{% endfor %}
# Initialize agent mapping - will be populated as agents are created
AGENT_OBJECT_MAP = {}

# Create all agents in dependency order
{% for agent in all_agents_sorted %}
{% if agent.kind == 'LlmAgent' %}
# Definition for LlmAgent: {{ agent.metadata.name }}
{{ agent.metadata.name | replace('-', '_') }} = LlmAgent(
    name="{{ agent.metadata.name }}",
    instruction="""{{ agent.spec.instruction }}""",
    tools=[
        TOOL_FUNCTION_MAP[tool_ref]
        for tool_ref in {{ agent.spec.toolRefs }}
    ],
    {% if agent.spec.output_key %}output_key="{{ agent.spec.output_key }}",{% endif %}
    model=MODEL_CONFIG_MAP["{{ agent.spec.modelRef }}"]
)
AGENT_OBJECT_MAP["{{ agent.metadata.name }}"] = {{ agent.metadata.name | replace('-', '_') }}

{% elif agent.kind == 'SequentialAgent' %}
# Definition for SequentialAgent: {{ agent.metadata.name }}
{{ agent.metadata.name | replace('-', '_') }} = SequentialAgent(
    name="{{ agent.metadata.name }}",
    sub_agents=[
        AGENT_OBJECT_MAP[agent_ref]
        for agent_ref in {{ agent.spec.subAgentRefs }}
    ],
)
AGENT_OBJECT_MAP["{{ agent.metadata.name }}"] = {{ agent.metadata.name | replace('-', '_') }}

{% elif agent.kind == 'LoopAgent' %}
# Definition for LoopAgent: {{ agent.metadata.name }}
{{ agent.metadata.name | replace('-', '_') }} = LoopAgent(
    name="{{ agent.metadata.name }}",
    sub_agents=[
        AGENT_OBJECT_MAP[agent_ref]
        for agent_ref in {{ agent.spec.subAgentRefs }}
    ],
    {% if agent.spec.maxIterations %}max_iterations={{ agent.spec.maxIterations }},{% endif %}
)
AGENT_OBJECT_MAP["{{ agent.metadata.name }}"] = {{ agent.metadata.name | replace('-', '_') }}

{% elif agent.kind == 'ParallelAgent' %}
# Definition for ParallelAgent: {{ agent.metadata.name }}
{{ agent.metadata.name | replace('-', '_') }} = ParallelAgent(
    name="{{ agent.metadata.name }}",
    sub_agents=[
        AGENT_OBJECT_MAP[agent_ref]
        for agent_ref in {{ agent.spec.subAgentRefs }}
    ],
)
AGENT_OBJECT_MAP["{{ agent.metadata.name }}"] = {{ agent.metadata.name | replace('-', '_') }}

{% endif %}
{% endfor %}

# --- Set the Root Agent ---
root_agent = AGENT_OBJECT_MAP["{{ root_agent_name }}"]