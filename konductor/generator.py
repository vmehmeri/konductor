# generator.py
import os
import argparse
from jinja2 import Environment, FileSystemLoader
from parser import parse_manifest, LlmAgentResource, ToolResource
from typing import List

# --- JINJA2 TEMPLATES ---

# Template for tools.py
TOOLS_PY_TEMPLATE = """
# This file is auto-generated by the ADK code generator.
# Do not edit this file directly.

# Import tool functions from their source files
{% for tool in tools %}
from {{ tool.spec.source.file.replace('.py', '').replace('/', '.') }} import {{ tool.spec.source.functionName }}
{% endfor %}
"""

# Template for agent.py
AGENT_PY_TEMPLATE = """
# This file is auto-generated by the ADK code generator.
# Do not edit this file directly.

from google.adk.agents import LlmAgent
from . import tools

# A dictionary to easily map tool names to their function objects
TOOL_FUNCTION_MAP = {
{% for tool in tools %}
    "{{ tool.metadata.name }}": tools.{{ tool.spec.source.functionName }},
{% endfor %}
}

{% for agent in agents %}
# Definition for {{ agent.metadata.name }}
{{ agent.metadata.name.replace('-', '_') }} = LlmAgent(
    model="{{ agent.spec.model }}",
    name="{{ agent.metadata.name }}",
    instruction=\"\"\"{{ agent.spec.instruction }}\"\"\",
    tools=[
        TOOL_FUNCTION_MAP[tool_ref]
        for tool_ref in {{ agent.spec.toolRefs }}
    ],
)
{% endfor %}

# Set the root agent for the application
# For this POC, we'll assume the first agent is the root.
root_agent = {{ agents[0].metadata.name.replace('-', '_') }}

"""

# Template for main.py
MAIN_PY_TEMPLATE = """
# This file is auto-generated by the ADK code generator.
# Do not edit this file directly.

import asyncio
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai.types import Content, Part
from .agent import root_agent

async def main():
    \"\"\"Main function to run the agent interactively.\"\"\"
    app_name = "generated-poc-app"
    user_id = "user-123"
    session_service = InMemorySessionService()

    runner = Runner(
        agent=root_agent,
        app_name=app_name,
        session_service=session_service,
    )

    session = await session_service.create_session(app_name=app_name, user_id=user_id)
    print(f"Agent '{root_agent.name}' is ready. Type 'exit' to quit.")

    while True:
        query = input("You: ")
        if query.lower() == "exit":
            break

        user_message = Content(parts=[Part(text=query)])
        
        final_response = ""
        async for event in runner.run_async(
            session_id=session.id, user_id=user_id, new_message=user_message
        ):
            if event.is_final_response() and event.content and event.content.parts:
                final_response = event.content.parts[0].text
        
        print(f"Agent: {final_response}")

if __name__ == "__main__":
    asyncio.run(main())
"""

def generate_code(agents: List[LlmAgentResource], tools: List[ToolResource], output_dir: str):
    """Generates ADK Python code from parsed resources."""
    os.makedirs(output_dir, exist_ok=True)

    env = Environment(loader=FileSystemLoader('.'))

    # Generate tools.py
    tools_template = env.from_string(TOOLS_PY_TEMPLATE)
    tools_code = tools_template.render(tools=tools)
    with open(os.path.join(output_dir, "tools.py"), "w") as f:
        f.write(tools_code)
    print(f"Generated {output_dir}/tools.py")

    # Generate agent.py
    agent_template = env.from_string(AGENT_PY_TEMPLATE)
    agent_code = agent_template.render(agents=agents, tools=tools)
    with open(os.path.join(output_dir, "agent.py"), "w") as f:
        f.write(agent_code)
    print(f"Generated {output_dir}/agent.py")

    # Generate main.py
    main_template = env.from_string(MAIN_PY_TEMPLATE)
    main_code = main_template.render()
    with open(os.path.join(output_dir, "main.py"), "w") as f:
        f.write(main_code)
    print(f"Generated {output_dir}/main.py")
    
    # Create __init__.py
    with open(os.path.join(output_dir, "__init__.py"), "w") as f:
        f.write("# Auto-generated __init__.py")
    print(f"Generated {output_dir}/__init__.py")

if __name__ == '__main__':
    # Set up the argument parser
    cli_parser = argparse.ArgumentParser(description="Generate ADK agent code from a YAML manifest.")
    
    # Add the required positional argument for the manifest file
    cli_parser.add_argument(
        "manifest_file", 
        type=str, 
        help="Path to the input YAML manifest file."
    )
    
    # Add an optional argument for the output directory
    cli_parser.add_argument(
        "-o", "--output-dir", 
        type=str, 
        default="generated_agent", 
        help="Directory to save the generated code (default: generated_agent)."
    )
    
    # Parse the command-line arguments
    args = cli_parser.parse_args()
    
    manifest_path = args.manifest_file
    output_directory = args.output_dir

    print(f"--- Running Code Generator for '{manifest_path}' ---")
    
    if not os.path.exists(manifest_path):
        print(f"Error: Manifest file not found at '{manifest_path}'")
        exit(1)
        
    parsed_agents, parsed_tools = parse_manifest(manifest_path)
    generate_code(parsed_agents, parsed_tools, output_directory)
    print(f"\nCode generation complete. Files are in '{output_directory}' directory.")
